name: generate-documentation

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  python-tests:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.11.2'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests
      run: |
        python -m unittest discover -s tests

  build-docs:
    needs: python-tests

    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.11.2'

    - name: Install Dependencies
      run: |
        pip install -r requirements.txt

    - name: Generate Documentation
      run: |
        sphinx-apidoc -o docs/source/ src/
        cd docs
        sphinx-build -b pdf source build/pdf
    
    - name: Generate Release Notes
      id: release_notes
      run: |
        echo "Release Notes for Build ${{ github.run_number }}" > release-notes.md
        echo "## Merged Pull Requests" >> release-notes.md
        
        LATEST_RELEASE_TAG=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r '.tag_name')
        
        COMMITS=$(git log $LATEST_RELEASE_TAG..HEAD --pretty=format:"%s")
    
        echo "$COMMITS" | grep -o -E '#[0-9]+' | sort -u | while read PR; do
          PR_NUMBER=${PR:1}
          PR_DETAILS=$(curl -s https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER)
          PR_TITLE=$(echo $PR_DETAILS | jq -r '.title')
          PR_AUTHOR=$(echo $PR_DETAILS | jq -r '.user.login')
          echo "- PR #$PR_NUMBER: $PR_TITLE by @$PR_AUTHOR" >> release-notes.md
        done

        cat release-notes.md
  
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.run_number }}
        release_name: Release ${{ github.run_number }}
        body_path: release-notes.md
        draft: false
        prerelease: false

    - name: Upload Documentation PDF to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./docs/build/pdf/rst2pdf.pdf
        asset_name: Documentation.pdf
        asset_content_type: application/pdf
